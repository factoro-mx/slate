---
title: Factoro API

language_tabs: # must be one of https://git.io/vQNgJ
  - shell: cURL

includes:
  - errors

search: true

code_clipboard: true
---

# Introduction

Welcome to the Factoro API - Buyers documentation. You can use our API to access our endpoints and integrate your operation directly with us.

We have language bindings in Shell, Ruby, Python, and JavaScript! You can view code examples in the dark area to the right, and you can switch the programming language of the examples with the tabs in the top right.

# About this API

There are some thing you should know about Factoro's API.

All operations are calculated with a precision of 6 decimals, and transformed into a `Float` when the information leaves the server.
Due to the fallbacks of using `Float`, Factoro calculates operations using Big Decimal, to ensure idempotence and precision.

Some actions of this API trigger notifications. This means that some (or all) of the related characters
in each instruction will receive and email with the corresponding information.
Each action that does, will have it in the description.

# Sandbox

The endpoints are the same in both Sandbox and Production environments. The only thing that changes is the base URL.

To use the API in Sandbox mode, replace the base url with `https://sandbox-api.factoro.mx`.

# Authentication

> To authorize, use this code:

```shell
# With shell, you can just pass the correct header with each request
curl "<%= config[:url] %>/v1" \
  -H "Authorization: Bearer ${secret_key}" -H "X-API-KEY: ${api_key}"
```

> Make sure to replace `token` with your API key.

Factoro uses a combination of API keys to access the API.

You will receive an **API** **Key** and a **Secret** **Key**, both of which should accompany all your requests.

| Header        | Content              |
| ------------- | -------------------- |
| Authorization | Bearer ${secret_key} |
| X-API-KEY     | ${api_key}           |

`Authorization: Bearer ${secret_key}`

<aside class="notice">
You must replace <code>${secret_key}</code> with your personal secret key and <code>${api_key}</code> with your api key.
</aside>

<aside class="warning">
Never share your API keys with anyone. If you believe your keys are compromised, contact the Factoro support team immediately.
</aside>

# Verification

## Verify that your integration and API key is working

```shell
curl "<%= config[:url] %>/v1/shared/authentication/hello" \
  -H "Authorization: Bearer ${secret_key}" -H "X-API-KEY: ${api_key}"
```

> Response:

```json
{
  "message": "Hello Factoro",
  "time": "2021-08-26T12:00:00"
}
```

This endpoint helps the user verify that the integration is correctly implemented.
By calling this endpoint, you will have tested that your service is correctly attaching the API key
and calling our server.

### HTTP Request

<span class="tag green">GET</span>
`<%= config[:url] %>/v1/shared/authentication/hello`

# Upload and approval

## Upload file and approve documents

```shell
curl -X POST "<%= config[:url] %>/v1/financial_institutions/credit_lines" \
  -H "Authorization: Bearer ${secret_key}" -H "X-API-KEY: ${api_key}" \
  -F "file=@/path/to/your/file.txt" \
```

> JSON response:

```json
{
  "token": "123456789abcdef",
  "status": "in_process",
  "date": "2025-06-15T12:00:00Z",
  "error": null,
  "process_type": "upload",
  "result": {}
}
```

### HTTP Request

<span class="tag blue">POST</span>
`<%= config[:url] %>/v1/companies/buyers/documents/layouts`

### Response

Returns a <a class="link" href="#financing-process">Financing process</a> instance

### Parameters

| Parameter                  | Type    | Required | Description                                                                                          |
| -------------------------- | ------- | -------- | ---------------------------------------------------------------------------------------------------- |
| file                       | Binary  | `true`   | The file to upload                                                                                   |

## Get Process Status

```shell
curl -X GET "<%= config[:url] %>/v1/companies/buyers/financing_processes/${token}" \
  -H "Authorization: Bearer ${secret_key}" -H "X-API-KEY: ${api_key}"
```

> JSON response:

```json
{
  "token": "123456789abcdef",
  "status": "in_process",
  "date": "2025-06-15T12:00:00Z",
  "error": null,
  "process_type": "upload",
  "result": {}
}
```

### HTTP Request

<span class="tag green">GET</span>
`<%= config[:url] %>/v1/companies/buyers/financing_processes/${token}`

### Response

Returns a <a class="link" href="#financing-process">Financing process</a> instance

### Parameters

| Parameter                  | Type    | Required | Description                                                                                          |
| -------------------------- | ------- | -------- | ---------------------------------------------------------------------------------------------------- |
| token                      | String  | `true`   | The unique identifier for the financing process                                                      |

<aside class="notice">
<strong>Polling Recommendation:</strong> When status is <code>in_process</code>, poll this endpoint every 5-10 seconds to check for updates. Avoid polling more frequently to prevent rate limiting.
</aside>


# Reports

## Get Operations Report

```shell
curl -X GET "<%= config[:url] %>/v1/companies/buyers/reports/financing/operations" \
  -H "Authorization: Bearer ${secret_key}" -H "X-API-KEY: ${api_key}"
```

> JSON response:

```json
{
  "date": "2025-10-17",
  "total": 10000,
  "documents": [
    {
      "id": 1,
      "uuid": "12345678-1234-1234-1234-123456789012",
      "total": 5000,
      "status": "processed",
      "balance": 5000,
      "factoring_id": "FAC123",
      "movement_folio": "MOV123",
      "discount_percentage": 100,
      "affiliated_company_relation": "parent_company",
      "credit_note_reference": null,
      "folio": "FOL123",
      "supply_chain_finance_rate": 0.03,
      "due_date_date": "2025-12-31",
      "processed_at": "2025-10-15T12:00:00Z",
      "bank_account_number": "1234567890",
      "discount_total": 150,
      "bank_account_bank_name": "Bank of Factoro"
    }
  ]
}
```

### HTTP Request

<span class="tag green">GET</span>
`<%= config[:url] %>/v1/companies/buyers/reports/financing/operations`

### Response

Returns a <a class="link" href="#operations-report">Operations report</a> instance

### Parameters

| Parameter                  | Type    | Required | Description                                                                                          |
| -------------------------- | ------- | -------- | ---------------------------------------------------------------------------------------------------- |
| date                       | String  | `false`   | The date to check the report. Defaults to current date                                               |


## Financing Process

> JSON:

```json
{
  "token": "123456789abcdef",
  "status": "done",
  "date": "2025-06-15T12:00:00Z",
  "error": null,
  "process_type": "upload",
  "result": {
    "successes": [
      {
        "data": {
          "buyer": {
            "name": "ACME CORPORATION SA DE CV",
            "tax_id": "ABC123456D89",
            "cfdi_use": "G01",
            "zip_code": 12345,
            "fiscal_scheme": 601
          },
          "document": {
            "date": "2025-10-05T17:59:59.999-06:00",
            "uuid": "12345678-1234-1234-1234-123456789012",
            "total": 1000.0,
            "currency": "MXN",
            "due_date": "2026-01-23T17:59:59.999-06:00",
            "factoring_id": "123456789",
            "factoring_type": "N",
            "taxes": {
              "vat": {
                "translation": {
                  "tax": 2.0,
                  "base": 1000.0,
                  "total": 137.93,
                  "maximum": 0.16,
                  "factor_type": "Tasa"
                }
              }
            }
          },
          "supplier": {
            "factoring_id": "987654"
          },
          "reference": "Sample Product Reference",
          "additional_1": "1234-ABC123456D89"
        },
        "line": 1,
        "content": "987654|123456789|05/10/2025|23/01/2026|01|1000|N|Sample Product Reference|..."
      }
    ],
    "errors": [
      {
        "line": 2,
        "error": "RFC receptor no vinculado a la cuenta: XYZ987654E21",
        "content": "12345|987654321|07/09/2025|26/12/2025|01|882306.48|N|Another Product Reference|..."
      }
    ],
    "error_total": 882306.48,
    "success_total": 1000.0
  }
}
```

The Financing Process object represents the current state of an asynchronous operation in the Factoro system. Use the `token` to poll for status updates until the process completes.

### Response Properties

| Parameter     | Type    | Required | Description                                    |
| ------------- | ------- | -------- | ---------------------------------------------- |
| token         | String  | ✓        | Unique identifier for tracking this process   |
| status        | String  | ✓        | Current process status (see values below)     |
| date          | String  | ✓        | ISO 8601 timestamp when process was created   |
| error         | String  | -        | Error message if status is `error`, otherwise `null` |
| process_type  | String  | ✓        | Type of operation (`upload`, `approval`, etc.) |
| result        | Object  | ✓        | Process results (populated when status is `done`) |

### Result Object Structure

When the process completes (`status` is `done`), the `result` object contains:

| Parameter  | Type    | Description                                           |
| ---------- | ------- | ----------------------------------------------------- |
| successes  | Array   | Array of successfully processed items with parsed data |
| errors     | Array   | Array of error objects for items that failed processing |

<aside class="notice">
<strong>Mixed Results:</strong> A single process can contain both successes and errors. Each line in your uploaded file is processed independently.
</aside>

### Success Object Structure

Each success in the `result.successes` array has the following structure:

| Parameter | Type   | Description                                        |
| --------- | ------ | -------------------------------------------------- |
| data      | Object | Parsed and structured data from the processed line |
| line      | Number | Line number in the uploaded file that was processed |
| content   | String | The original raw content/data from the file |

#### Data Object Structure

The `data` object contains the parsed information organized into logical sections:

| Parameter     | Type   | Description                                    |
| ------------- | ------ | ---------------------------------------------- |
| buyer         | Object | Information about the buyer/receptor           |
| document      | Object | Invoice/document details and metadata         |
| supplier      | Object | Information about the supplier/emisor         |
| reference     | String | Reference description for the transaction     |
| additional_1  | String | Additional field 1 (buyer reference)         |
| additional_2  | String | Additional field 2 (internal reference)      |
| additional_4  | String | Additional field 4 (amount reference)        |
| additional_5  | String | Additional field 5 (UUID reference)          |

#### Buyer Object

| Parameter      | Type   | Description                    |
| -------------- | ------ | ------------------------------ |
| name           | String | Legal name of the buyer        |
| tax_id         | String | Tax identification number      |
| cfdi_use       | String | CFDI usage code               |
| zip_code       | Number | Postal code                   |
| fiscal_scheme  | Number | Fiscal regime code            |

#### Document Object

| Parameter              | Type   | Description                           |
| ---------------------- | ------ | ------------------------------------- |
| date                   | String | Document creation date (ISO 8601)    |
| uuid                   | String | Unique document identifier            |
| total                  | Number | Total document amount                 |
| currency               | String | Currency code (e.g., "MXN")          |
| due_date               | String | Payment due date (ISO 8601)          |
| factoring_id           | String | Factoring identification number       |
| factoring_type         | String | Type of factoring operation          |
| credit_note_reference  | String | Credit note reference (if applicable) |
| taxes                  | Object | Tax breakdown information             |

#### Supplier Object

| Parameter     | Type   | Description                    |
| ------------- | ------ | ------------------------------ |
| factoring_id  | String | Supplier's factoring ID        |

### Error Object Structure

Each error in the `result.errors` array has the following structure:

| Parameter | Type   | Description                                        |
| --------- | ------ | -------------------------------------------------- |
| line      | Number | Line number in the uploaded file where error occurred |
| error     | String | Human-readable error message describing the issue |
| content   | String | The actual content/data from the file that caused the error |

### Status Values

The `status` field indicates the current state of your financing process:

| Status        | Description                                      | Next Steps                              |
| ------------- | ------------------------------------------------ | --------------------------------------- |
| `in_process`  | Process is currently running                     | Poll this endpoint until status changes |
| `done`        | Process completed successfully                   | Check `result` object for details       |
| `error`       | Process failed with an error                    | Check `error` field for details         |

## Operation Report

> JSON:

```json
{
  "date": "2025-10-17",
  "total": 10000,
  "documents": [
    {
      "id": 1,
      "uuid": "12345678-1234-1234-1234-123456789012",
      "total": 5000,
      "status": "processed",
      "balance": 5000,
      "factoring_id": "FAC123",
      "movement_folio": "MOV123",
      "discount_percentage": 100,
      "affiliated_company_relation": "parent_company",
      "credit_note_reference": null,
      "folio": "FOL123",
      "supply_chain_finance_rate": 0.03,
      "due_date_date": "2025-12-31",
      "processed_at": "2025-10-15T12:00:00Z",
      "bank_account_number": "1234567890",
      "discount_total": 150,
      "bank_account_bank_name": "Bank of Factoro"
    }
  ]
}
```

### Response Properties

| Parameter     | Type    | Required | Description                                    |
| ------------- | ------- | -------- | ---------------------------------------------- |
| date         | String  | ✓        | The date for the report   |
| total        | Number  | ✓        | Total amount for the report   |
| documents    | Array   | ✓        | List of document operation details             |

### Documents Object Structure

When the process completes (`status` is `done`), the `documents` array contains:

| Parameter  | Type    | Description                                           |
| ---------- | ------- | ----------------------------------------------------- |
| id  | Number   | ID of the successfully processed item                 |
| uuid     | String   | UUID of the document that failed processing            |
| total      | Number  | Total amount of the document                          |
| status     | String  | Current status of the document                        |
| balance    | Number  | Remaining balance of the document                    |
| factoring_id | String | Factoring identification number                       |
| movement_folio | String | Movement folio associated with the document          |
| discount_percentage | Number | Discount percentage applied to the document          |
| affiliated_company_relation | String | Relation to affiliated company (e.g., parent_company) |
| credit_note_reference | String | Reference to any associated credit note               |
| folio | String | Folio number of the document                           |
| supply_chain_finance_rate | Number | Supply chain finance rate applied to the document     |
| due_date_date | String | Due date of the document                               |
| processed_at | String | Timestamp when the document was processed             |
| bank_account_number | String | Bank account number associated with the document      |
| discount_total | Number | Total discount applied to the document                |
| bank_account_bank_name | String | Name of the bank associated with the bank account     |

### Status Values

The `status` field indicates the current state of your financing process:

| Status        | Description                                      |
| ------------- | ------------------------------------------------ |
| `processed`  | Document was processed and it's awaiting payment by the buyer |
| `paid`        | Document was paid by the buyer                   |
